#!/bin/bash


stty -echo
#задаем пароль пользователя pi
echo
echo -e -n "\033[1;33mEnter password user pi (введите пароль пользователя pi) > \033[0m"
read pass2
stty echo
echo ""
apt update -y
apt upgrade -y
apt install -y python-pip python-dev python-setuptools python-virtualenv git libyaml-dev build-essential virtualenv mc
useradd -m -d /home/pi pi -p $pass2
usermod -a -G sudo pi
usermod -a -G tty pi
usermod -a -G dialout pi
su pi -c 'virtualenv /home/pi/OctoPrint'
su pi -c '/home/pi/OctoPrint/bin/pip install OctoPrint'
su pi -c '/home/pi/OctoPrint/bin/octoprint' &


tee /etc/init.d/octoprint << EOF
### BEGIN INIT INFO
# Provides:          octoprint
# Required-Start:    \$local_fs networking
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: OctoPrint daemon
# Description:       Starts the OctoPrint daemon with the user specified in
#                    /etc/default/octoprint.
### END INIT INFO

# Author: Sami Olmari & Gina Häußge

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="OctoPrint Daemon"
NAME="OctoPrint"
PKGNAME=octoprint
PIDFILE=/var/run/\$PKGNAME.pid
SCRIPTNAME=/etc/init.d/\$PKGNAME
DEFAULTS=/etc/default/\$PKGNAME

# Read configuration variable file if it is present
[ -r \$DEFAULTS ] && . \$DEFAULTS
# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions
# Exit if the DAEMON is not set
if [ -z "\$DAEMON" ]
then
    log_warning_msg "Not starting \$PKGNAME, DAEMON not set in /etc/default/\$PKGNAME."
    exit 0
fi
# Exit if the DAEMON is not installed
[ -x "\$DAEMON" ] || exit 0
# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS
if [ -z "\$START" -o "\$START" != "yes" ]
then
   log_warning_msg "Not starting \$PKGNAME, edit /etc/default/\$PKGNAME to start it."
   exit 0
fi
if [ -z "\$OCTOPRINT_USER" ]
then
    log_warning_msg "Not starting \$PKGNAME, OCTOPRINT_USER not set in /etc/default/\$PKGNAME."
    exit 0
fi
COMMAND_ARGS=
if [ -n "\$BASEDIR" ]
then
    COMMAND_ARGS="--basedir \$BASEDIR \$COMMAND_ARGS"
fi
if [ -n "\$CONFIGFILE" ]
then
    COMMAND_ARGS="--config \$CONFIGFILE \$COMMAND_ARGS"
fi
#
# Function to verify if a pid is alive
#
is_alive()
{
   pid=`cat \$1` > /dev/null 2>&1
   kill -0 \$pid > /dev/null 2>&1
   return \$?
}
#
# Function that starts the daemon/service
#
do_start()
{
   # Return
   #   0 if daemon has been started
   #   1 if daemon was already running
   #   2 if daemon could not be started

   is_alive \$PIDFILE
   RETVAL="\$?"

   if [ \$RETVAL != 0 ]; then
       start-stop-daemon --start --background --quiet --pidfile \$PIDFILE --make-pidfile \
       --exec \$DAEMON --chuid \$OCTOPRINT_USER --user \$OCTOPRINT_USER --umask \$UMASK --nicelevel=\$NICELEVEL \
       -- serve \$COMMAND_ARGS \$DAEMON_ARGS
       RETVAL="\$?"
   fi
}
#
# Function that stops the daemon/service
#
do_stop()
{
   # Return
   #   0 if daemon has been stopped
   #   1 if daemon was already stopped
   #   2 if daemon could not be stopped
   #   other if a failure occurred

   start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --user \$OCTOPRINT_USER --pidfile \$PIDFILE
   RETVAL="\$?"
   [ "\$RETVAL" = "2" ] && return 2

   rm -f \$PIDFILE

   [ "\$RETVAL" = "0"  ] && return 0 || return 1
}
case "\$1" in
  start)
   [ "\$VERBOSE" != no ] && log_daemon_msg "Starting \$DESC" "\$NAME"
   do_start
   case "\$?" in
      0|1) [ "\$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "\$VERBOSE" != no ] && log_end_msg 1 ;;
   esac
   ;;
  stop)
   [ "\$VERBOSE" != no ] && log_daemon_msg "Stopping \$DESC" "\$NAME"
   do_stop
   case "\$?" in
      0|1) [ "\$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "\$VERBOSE" != no ] && log_end_msg 1 ;;
   esac
   ;;
  status)
   status_of_proc -p \$PIDFILE \$DAEMON \$NAME && exit 0 || exit \$?
   ;;
  restart)
   log_daemon_msg "Restarting \$DESC" "\$NAME"
   do_stop
   case "\$?" in
     0|1)
      do_start
      case "\$?" in
         0) log_end_msg 0 ;;
         1) log_end_msg 1 ;; # Old process is still running
         *) log_end_msg 1 ;; # Failed to start
      esac
      ;;
     *)
        # Failed to stop
      log_end_msg 1
      ;;
   esac
   ;;
  *)
   echo "Usage: \$SCRIPTNAME {start|stop|status|restart}" >&2
   exit 3
   ;;
esac
EOF

tee /etc/default/octoprint << EOF
OCTOPRINT_USER=pi
BASEDIR=/home/pi/.octoprint
CONFIGFILE=/home/pi/.octoprint/config.yaml
PORT=5000
DAEMON=/home/pi/OctoPrint/bin/octoprint
DAEMON_ARGS="--port=\$PORT"
UMASK=022
NICELEVEL=-2
START=yes
EOF

tee /home/pi/.octoprint/plugins/rewrite_wait_to_busy.py << EOF
# coding=utf-8
import logging
def rewrite_wait_to_busy(comm_instance, line, *args, **kwargs):
    if line == "wait" or line.startswith("wait"):
        return "echo:busy processing"
    else:
        return line
__plugin_name__ = "Rewrite wait to busy"
__plugin_description__ = "Rewrites received wait responses to echo:busy processing for broken firmware misunderstanding when wait should be used"
__plugin_author__ = "Gina Häußge"
__plugin_hooks__ = {
    "octoprint.comm.protocol.gcode.received": rewrite_wait_to_busy
}
EOF


chmod +x /etc/init.d/octoprint
update-rc.d octoprint defaults
sudo hostnamectl set-hostname octoprint.lan
sudo echo "127.0.0.1 octoprint.lan" >> /etc/hosts
sudo echo "127.0.0.1 octoprint" >> /etc/hosts
echo "overlays=analog-codec i2c0 i2c1 spi-spidev uart1 uart2 uart3" | tee -a /boot/armbianEnv.txt

su pi -c '/home/pi/OctoPrint/bin/pip install https://github.com/Salandora/octoprint-customControl/archive/master.zip'
su pi -c '/home/pi/OctoPrint/bin/pip install https://github.com/1r0b1n0/OctoPrint-Tempsgraph/archive/master.zip'

